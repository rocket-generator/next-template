---
description: 認証機能の DB 設計とデータ整合性を確認するためのガイド
alwaysApply: false
---
# Better Auth 対応 認証データベース設計ガイド

本リポジトリの認証基盤は **Better Auth + Prisma** を採用しており、ユーザー／セッション／検証トークンを PostgreSQL で管理します。本書では現行スキーマの役割、カラム仕様、アプリケーションコードとの結びつきを整理します。

## スキーマ全体像

`prisma/schema.prisma` で定義している主要モデルは以下のとおりです。

| モデル | 役割 | 主な関連 |
| ------ | ---- | -------- |
| `User` | エンドユーザー情報の中核。プロファイル／権限を保持 | `Session`, `Account`, `PasswordReset`, `EmailVerification` |
| `Session` | Better Auth のセッショントークンと付加情報 | `User` (多対1) |
| `Account` | 認証プロバイダー単位のクレデンシャル管理。Credential プロバイダーで PBKDF2 ハッシュも保持 | `User` |
| `Verification` | Better Auth が利用する汎用検証トークン（主にメール検証） | なし |
| `PasswordReset` | ドメインサービスが発行するパスワードリセットトークン | `User` |
| `EmailVerification` | サービス独自のメール検証トークン（再送・状態管理用） | `User` |

以降では各モデルを詳しく解説します。コメントは schema.prisma の内容に準じます。

## User モデル

```prisma
model User {
  id            String   @id @default(uuid()) @db.Uuid
  name          String
  email         String   @unique
  password      String
  permissions   Json
  language      String   @default("")
  avatarKey     String?  @map("avatar_key")
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  passwordResets     PasswordReset[]
  emailVerifications EmailVerification[]
  sessions           Session[]
  accounts           Account[]

  @@map("users")
}
```

- `permissions` は JSON 配列で格納し、Better Auth セッション書き戻し時にマージされます。
- `language` は UI の既定言語。`hooks/useAuthSession` から参照されることがあります。
- `emailVerified` はドメイン側（`AuthService.verifyEmail*`）と Better Auth 両方で利用され、ミドルウェアのアクセス制御にも関与します。

## Session モデル

```prisma
model Session {
  id          String   @id @default(cuid())
  userId      String   @map("user_id") @db.Uuid
  token       String   @unique
  expiresAt   DateTime @map("expires_at")
  accessToken String?  @map("access_token")
  permissions Json?    @map("permissions")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}
```

- Better Auth の `session.additionalFields` と同期しており、`accessToken` / `permissions` はサーバーアクションで付与されます。
- `cookieCache` 機能を有効にしているため、`updatedAt` の更新頻度に注意（`updateAge`=4h）。
- 監査ログや IP 制限が必要になった場合は `ipAddress` / `userAgent` を参照し、集計できるようにしています。

## Account モデル

```prisma
model Account {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id") @db.Uuid
  providerId            String    @map("provider_id")
  accountId             String    @map("account_id")
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?   @map("scope")
  password              String?   @map("password")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("accounts")
}
```

- 現状は `providerId = "credential"` のみを想定し、`password` カラムに PBKDF2 ハッシュを保持。`syncCredentialAccount()` で同期します。
- 外部 IdP を追加する際は `providerId` / `accountId` ペアで一意制約となるようにしてください。

## Verification モデル

```prisma
model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @map("token")
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([identifier])
  @@map("verifications")
}
```

- Better Auth の内部 API が利用する汎用トークンテーブルです。メール検証やパスワードレスログインなどで使用される可能性があります。
- アプリ側で直接参照するケースは現状ありませんが、クリーンアップを予定する場合は `expiresAt` を条件に削除してください。

## PasswordReset モデル

```prisma
model PasswordReset {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt BigInt   @map("expires_at")
  usedAt    BigInt?  @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_resets")
}
```

- `AuthService.createResetToken()` が生成・保存。`expiresAt` / `usedAt` は `BigInt`（UNIX time）で管理します。
- 有効期限切れトークンのクリーンアップは `AuthService.cleanupExpiredTokens()` を参照。

## EmailVerification モデル

```prisma
model EmailVerification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt BigInt   @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verifications")
}
```

- メール認証の再送や状態表示に使用します。Better Auth 標準の `Verification` とは別個に管理する点に注意してください（ドメイン都合のため）。
- `AuthService.sendVerificationEmail()` が新規レコードを作成し、使用後は `deleteUserTokens()` で削除します。

## モデル間の関係と整合性

- すべての従属テーブルは `onDelete: Cascade` を設定しているため、ユーザー削除時には関連データがまとめて消去されます。
- サインイン時は `AuthService.signIn()` → `establishSession()` の流れで `Session` と `Account` が更新されるため、トランザクション整合性を保ちたい場合は今後 `prisma.$transaction` への拡張を検討してください。
- 追加の外部プロバイダーを実装する際は `Account` テーブルに必要なカラム（refresh token 等）が揃っているか確認し、不足があればマイグレーションを作成します。

## マイグレーション運用

- Prisma のマイグレーションは `prisma/migrations/` に記録されます。Better Auth 関連のスキーマ変更を行った場合は、マイグレーションファイルに **意図とリスク** をコメント等で残すことを推奨します。
- 本番環境へデプロイする際は `prisma migrate deploy` を使用してください。ローカル検証では `prisma migrate dev` を利用し、`npm run docker:db:setup` で LocalStack/DB と合わせて初期化できます。

## 開発時のチェックリスト

1. **新しいフィールドを追加したら** `src/models/user.ts` や `AuthSchema` を同期し、サーバーアクション／テストが型チェックを通るようにする。
2. **Better Auth の追加フィールドを増やす場合** は `Session` モデルと `session.additionalFields` の両方を更新し、`jest.setup.ts` のモックも忘れずに。
3. **削除やデータ移行を行う場合**、`syncCredentialAccount()` や `AuthService` のロジックが期待通り動作するか E2E (`e2e/auth.spec.ts`) を通して確認する。

---

このドキュメントを更新した際は、README や環境変数テンプレートも合わせて見直し、開発者体験を揃えてください。
