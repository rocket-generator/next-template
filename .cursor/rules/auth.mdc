---
description: 認証まわりの実装・改修時に参照するガイド
alwaysApply: false
---
# Better Auth + Prisma 認証システム実装ガイド

このドキュメントでは、本リポジトリで採用している **Better Auth** と **Prisma** を組み合わせた認証基盤の構成・運用方法をまとめます。サーバー／クライアントのエントリポイント、DB スキーマ、サーバーアクション連携までを俯瞰し、改修時に必要な判断材料を提供することを目的としています。

## 目次

- [Better Auth + Prisma 認証システム実装ガイド](#better-auth--prisma-認証システム実装ガイド)
  - [目次](#目次)
  - [全体像](#全体像)
  - [主要依存関係](#主要依存関係)
  - [ディレクトリ構造](#ディレクトリ構造)
  - [環境変数](#環境変数)
  - [サーバー実装](#サーバー実装)
  - [クライアント実装](#クライアント実装)
  - [サーバーアクションとフロー](#サーバーアクションとフロー)
    - [サインイン (`src/app/(site)/(unauthorized)/(auth)/signin/actions.ts`)](#サインイン-srcappsiteunauthorizedauthsigninactionsts)
    - [サインアップ (`src/app/(site)/(unauthorized)/(auth)/signup/actions.ts`)](#サインアップ-srcappsiteunauthorizedauthsignupactionsts)
    - [サインアウト (`src/app/(site)/(authorized)/(app)/actions.ts` など)](#サインアウト-srcappsiteauthorizedappactionsts-など)
  - [ミドルウェアとルーティング制御](#ミドルウェアとルーティング制御)
  - [セキュリティと監査ポイント](#セキュリティと監査ポイント)
  - [テスト戦略](#テスト戦略)

## 全体像

- 認証は **Better Auth** の `betterAuth()` を用いてサーバー側に常駐させ、Prisma アダプターで PostgreSQL の `Session` / `Account` / `Verification` テーブルを管理します。
- ログインフォームなどの UI は Server Action 経由で `AuthService`（既存のドメインサービス）に委譲し、アクセストークンや権限情報を Better Auth セッションに書き戻します。
- クライアント側でセッション状態を取得する箇所は `better-auth/react` のクライアントを薄くラップした `src/libraries/auth-client.ts` と `hooks/useAuthSession.ts` を使用します。
- 既存の API クライアントや権限チェックは `session.permissions` / `session.accessToken` を使用するよう統一されています。

## 主要依存関係

`package.json` から認証に直結するものを抜粋します。

```jsonc
{
  "dependencies": {
    "better-auth": "^1.3.29",
    "@better-fetch/fetch": "^1.1.18",
    "@prisma/client": "^6.8.2",
    "next-intl": "^3.26.3"
  },
  "devDependencies": {
    "prisma": "^6.8.2",
    "@types/node": "^20",
    "typescript": "^5"
  }
}
```

`better-auth/adapters/prisma` を利用するため、Prisma の生成物は `src/generated/prisma` に配置しています。

## ディレクトリ構造

```
src/
├── app/
│   ├── api/auth/[...all]/route.ts    # Better Auth の Next.js ルートハンドラ
│   ├── (site)/(unauthorized)/auth/   # サインイン/アップ等の公開エリア
│   │   └── signin/actions.ts         # Server Action から AuthService と better-auth を連携
│   └── middleware.ts                 # getSessionCookie() を用いた保護ロジック
├── libraries/
│   ├── auth.ts                       # betterAuth() のサーバー設定・ヘルパー群
│   ├── auth-client.ts                # better-auth/react クライアントラッパー
│   └── hash.ts                       # PBKDF2 によるハッシュ/検証
├── hooks/
│   └── useAuthSession.ts             # セッション情報を安全に抽出
├── services/
│   └── auth_service.ts               # 既存 AuthService（DBとSES/メール機能を統括）
├── repositories/                     # Prisma ベースのデータアクセス
└── models/                           # Zod スキーマ（AuthSchema, UserSchema など）

prisma/
├── schema.prisma                     # Better Auth 用 Session / Account / Verification を含む
└── seed.ts                           # 初期データ投入スクリプト
```

## 環境変数

必須となるキーを整理します。全シーンで `.env.sample` / `.env.docker` を参照してください。

| 変数 | 用途 | 備考 |
| ---- | ---- | ---- |
| `BETTER_AUTH_BASE_URL` | Better Auth が生成するリンクのベース URL | dev では `http://localhost:3000` |
| `BETTER_AUTH_SECRET` | セッション暗号化用の秘密鍵 | 旧 `AUTH_SECRET` でも互換を維持（`auth.ts` 側でフォールバック） |
| `NEXT_PUBLIC_BETTER_AUTH_BASE_PATH` | クライアントからの API パス | 既定値 `/api/auth` |
| `ENABLE_EMAIL_VERIFICATION` | メール検証の有効／無効フラグ | サインアップ時の動作切り替え |
| `LOCALSTACK_ENDPOINT` 等 | SES/S3 のエミュレーション | LocalStack 利用時 |

`src/libraries/auth.ts` では `BETTER_AUTH_SECRET` → `AUTH_SECRET` の順で解決し、NextAuth 用のキーには依存しません。

## サーバー実装

`src/libraries/auth.ts` のポイントを押さえます。

```ts
const authInstance = betterAuth({
  baseURL,
  secret,
  database: prismaAdapter(prisma, { transaction: true, usePlural: false }),
  plugins: [nextCookies()],
  session: {
    additionalFields: {
      accessToken: { type: "string", fieldName: "accessToken", returned: true },
      permissions: { type: "json", fieldName: "permissions", returned: true, defaultValue: () => [] }
    },
    cookieCache: { enabled: true, maxAge: 60 * 5 },
    storeSessionInDatabase: true,
    expiresIn: 60 * 60 * 24,
    updateAge: 60 * 60 * 4
  },
  emailAndPassword: {
    enabled: true,
    disableSignUp: true, // サインアップは AuthService 側で制御
    requireEmailVerification: process.env.ENABLE_EMAIL_VERIFICATION === "true",
    password: {
      hash: hashPassword,
      verify: async ({ hash, password }) => verifyPassword(password, hash)
    }
  }
});
```

公開される主なヘルパー：

- `auth(options)` – `authInstance.api.getSession` を包んだユーティリティ。`disableCookieCache` や `disableRefresh` を切り替え可能。
- `signIn(options)` / `signOut()` – `establishSession` や API 経由で Better Auth セッションを制御。
- `establishSession()` – `signInEmail` 呼び出し後、`Session` テーブルに `accessToken` / `permissions` を書き戻す。
- `syncCredentialAccount()` – Prisma 経由で `Account` テーブルと `User` を同期（既存 AuthService で生成したハッシュを保持）。
- `handlers` – `/api/auth/[...all]` で利用する Next.js ルートハンドラ。

## クライアント実装

`src/libraries/auth-client.ts` では `better-auth/react` の `createAuthClient` を初期化し、`signIn`, `signOut`, `useSession` をエクスポートしています。サーバーと同じベース URL／パスを共有する点が重要です。

`hooks/useAuthSession.ts` は `useSession()` の戻り値を正規化し、

- `session` / `user`
- 最終的な `permissions` 配列（セッション優先）
- `accessToken`

をまとめて返すヘルパーです。UI コンポーネントはこの hook を通じて Better Auth のレスポンス構造を意識せずに済みます。

## サーバーアクションとフロー

### サインイン (`src/app/(site)/(unauthorized)/(auth)/signin/actions.ts`)

1. `AuthService.signIn()` で資格情報の検証とアクセストークン発行。
2. `syncCredentialAccount()` で `Account` テーブルを更新し Better Auth と認証情報を合わせる。
3. `signIn()` で Better Auth セッションを確立し、`Session` レコードに `accessToken` / `permissions` を保存。
4. エラー時は `invalid_credentials` や `email_not_verified` にマッピングして UI に返却。

### サインアップ (`src/app/(site)/(unauthorized)/(auth)/signup/actions.ts`)

- `AuthService.signUp()` によりドメインルールに沿ってユーザー作成。
- `ENABLE_EMAIL_VERIFICATION` が有効な場合はアクセストークンを返さずメール検証を要求。
- アクセストークンが返るケースでは、そのまま `signIn()` で Better Auth セッションを作成。

### サインアウト (`src/app/(site)/(authorized)/(app)/actions.ts` など)

- `signOut()` は `authInstance.api.signOut` を呼び出し、クッキーと DB セッションを無効化します。

## ミドルウェアとルーティング制御

`src/middleware.ts` では Better Auth の `getSessionCookie()` と `auth()` を組み合わせ、以下を実装しています。

- `PUBLIC_PAGES` リストに含まれる URL は常に許可。
- 認証が必要なパスかつ未ログインの場合、サインインページへリダイレクト。
- セッション更新を最小化するため、Cookie キャッシュを尊重。

新しい保護ページを追加する際は `PUBLIC_PAGES` の確認と route グループの構成を必ず見直してください。

## セキュリティと監査ポイント

- パスワードは `hash.ts` 内の PBKDF2 実装でハッシュ化されています。Salt/iterations は変更する場合でも `verifyPassword` と整合するようにすること。
- `Session` テーブルに保存する `accessToken` は API 認証で使用されるため、再生成時のインバリデーションポリシーをドキュメント化してください。
- メール検証は `EmailVerification` テーブルで Unix タイムスタンプ (`BigInt`) を使用。LocalStack を利用する場合は `LOCALSTACK_ENDPOINT` が適切に設定されているか確認します。
- `permissions` は JSON 配列で保持されるため、UI 側でも `Array<string>` への正規化を忘れないこと。

## テスト戦略

- Jest のセットアップ (`jest.setup.ts`) で better-auth の主要モジュールをモックし、ESM 由来の取り込み問題を回避しています。構造を変える場合はモックの戻り値 (`useSession` の shape など) を同時に更新してください。
- ユニットテストでは `@/libraries/auth` を直接モックするケースが多いので、`signIn`/`auth` など新しいヘルパーを追加した場合はモックも拡張する必要があります。
- Playwright の E2E (`e2e/auth.spec.ts`) は `/signin` → `/dashboard` のフローで Better Auth のクッキーを検証します。リダイレクト先を変更した場合はテストも合わせて更新してください。

---

Better Auth 周りの変更を実施した際は、

1. 環境変数テンプレートとドキュメントを更新
2. Prisma マイグレーション（セッション構造）を確認
3. Jest/E2E のモック・期待値を同期

することを忘れないでください。
